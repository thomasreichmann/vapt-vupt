{"_type":"export","__export_format":4,"__export_date":"2024-11-12T22:44:18.855Z","__export_source":"insomnia.desktop.app:v10.1.1","resources":[{"_id":"req_d07cdf46e19c4e4db14b45575cca9c9c","parentId":"fld_6989df2f67c04dc98e25e3e54fff7f10","modified":1731451069654,"created":1731449468439,"url":"https://api.go.gov.br/sigac/atendimentos/v1.0/agendamento/listarDatasAgendamento","name":"goiania","description":"","method":"GET","body":{},"parameters":[{"name":"idSenha","value":"58","id":"pair_5a6c3b985d764a49bdddde327e02c97b","disabled":false},{"name":"status","value":"D","id":"pair_9f4c3bde3ef84f81a3ba9d823317604b","disabled":false},{"name":"codgMunicipio","value":"25300","id":"pair_c2b1595a8f8c43e4a4944382166727cd","disabled":false}],"headers":[{"name":"User-Agent","value":"insomnia/10.1.1"}],"authentication":{},"metaSortKey":-1731449478044,"isPrivate":false,"pathParameters":[],"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_6989df2f67c04dc98e25e3e54fff7f10","parentId":"wrk_67855b21f7374f279ab348ff3fa9655d","modified":1731449504318,"created":1731449472420,"name":"base","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1731449472420,"authentication":{"type":"oauth2","grantType":"client_credentials","clientId":"jMQoyH_T2GpWXwBlH6goWfBBdr0a","clientSecret":"k8BOsIHTF6sARfHq4qBPsvaYjf4a","accessTokenUrl":"https://api.go.gov.br/token"},"_type":"request_group"},{"_id":"wrk_67855b21f7374f279ab348ff3fa9655d","parentId":null,"modified":1731449449138,"created":1731449449138,"name":"vapt-vupt-spec.yaml","description":"","scope":"design","_type":"workspace"},{"_id":"req_87a6acaf17ac40168fec288488bf6cff","parentId":"fld_6989df2f67c04dc98e25e3e54fff7f10","modified":1731451111757,"created":1731451075315,"url":"https://api.go.gov.br/sigac/atendimentos/v1.0/agendamento/listarDatasAgendamento","name":"aparecida","description":"","method":"GET","body":{},"parameters":[{"name":"idSenha","value":"58","id":"pair_5a6c3b985d764a49bdddde327e02c97b","disabled":false},{"name":"status","value":"D","id":"pair_9f4c3bde3ef84f81a3ba9d823317604b","disabled":false},{"name":"codgMunicipio","value":"33800","id":"pair_c2b1595a8f8c43e4a4944382166727cd","disabled":false}],"headers":[{"name":"User-Agent","value":"insomnia/10.1.1"}],"authentication":{},"metaSortKey":-1731448160753,"isPrivate":false,"pathParameters":[],"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_5462ea790bdd48a7866ce49afaccec10","parentId":"fld_6989df2f67c04dc98e25e3e54fff7f10","modified":1731451128399,"created":1731451079766,"url":"https://api.go.gov.br/sigac/atendimentos/v1.0/agendamento/listarDatasAgendamento","name":"trindade","description":"","method":"GET","body":{},"parameters":[{"name":"idSenha","value":"58","id":"pair_5a6c3b985d764a49bdddde327e02c97b","disabled":false},{"name":"status","value":"D","id":"pair_9f4c3bde3ef84f81a3ba9d823317604b","disabled":false},{"name":"codgMunicipio","value":"28800","id":"pair_c2b1595a8f8c43e4a4944382166727cd","disabled":false}],"headers":[{"name":"User-Agent","value":"insomnia/10.1.1"}],"authentication":{},"metaSortKey":-1731447502107.5,"isPrivate":false,"pathParameters":[],"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"env_2ae5c8c888ab830d64c25e45ccc0cd786627abdc","parentId":"wrk_67855b21f7374f279ab348ff3fa9655d","modified":1731449449140,"created":1731449449140,"name":"Base Environment","data":{},"dataPropertyOrder":null,"color":null,"isPrivate":false,"metaSortKey":1731449449140,"_type":"environment"},{"_id":"jar_2ae5c8c888ab830d64c25e45ccc0cd786627abdc","parentId":"wrk_67855b21f7374f279ab348ff3fa9655d","modified":1731451169878,"created":1731449449140,"name":"Default Jar","cookies":[{"key":"BIGipServer~Apps~pool_sso-go","value":"rd3o00000000000000000000ffff0a06032do9443","domain":"api.go.gov.br","path":"/","httpOnly":true,"hostOnly":true,"creation":"2024-11-12T22:11:46.981Z","lastAccessed":"2024-11-12T22:11:46.981Z","id":"4c01e323-3941-43d0-95a5-dc65a33eb6f6"},{"key":"TS0181b636","value":"01668d6620abec2b0d413a0275a0201c75a460747d551a6519a70cce53dd9204029a8ae53d19eb04c2e76fe032cf6bb281524e3ab4","domain":"api.go.gov.br","path":"/","hostOnly":true,"creation":"2024-11-12T22:11:46.981Z","lastAccessed":"2024-11-12T22:39:29.877Z","id":"47f755bc-0cfc-482d-9a06-e6214504a9e0"},{"key":"CookieGenericoGoias","value":"rd3o00000000000000000000ffff0a060347o80","domain":"api.go.gov.br","path":"/","httpOnly":true,"hostOnly":true,"creation":"2024-11-12T22:12:48.529Z","lastAccessed":"2024-11-12T22:12:48.529Z","id":"a6c2e647-8bb2-449f-8bd6-a358858b7595"},{"key":"dummy_session","value":"mm9iip6jdh26uac3dnfsaid5an","expires":"2024-11-12T23:39:29.000Z","maxAge":3600,"domain":"api.go.gov.br","path":"/","hostOnly":true,"creation":"2024-11-12T22:12:48.530Z","lastAccessed":"2024-11-12T22:39:29.877Z","id":"e896e997-7202-45b9-be14-493c9628448c"}],"_type":"cookie_jar"},{"_id":"spc_2a92e5ed1c034ae2ab7fd9143185ca17","parentId":"wrk_67855b21f7374f279ab348ff3fa9655d","modified":1731450391539,"created":1731450391539,"fileName":"vapt-vupt-spec.yaml","contents":"openapi: 3.0.0\ninfo:\n  description: \"This is a sample server Petstore server.  You can find out more about\n    Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net,\n    #swagger](http://swagger.io/irc/).  For this sample, you can use the api key\n    'special-key' to test the authorization filters.\"\n  version: 1.0.2\n  title: Swagger Petstore\n  termsOfService: http://swagger.io/terms/\n  contact:\n    email: apiteam@swagger.io\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\ntags:\n  - name: pet\n    description: Everything about your Pets\n    externalDocs:\n      description: Find out more\n      url: http://swagger.io\n  - name: store\n    description: Access to Petstore orders\n  - name: user\n    description: Operations about user\n    externalDocs:\n      description: Find out more about our store\n      url: http://swagger.io\npaths:\n  /pet:\n    post:\n      tags:\n        - pet\n      summary: Add a new pet to the store\n      description: \"\"\n      operationId: addPet\n      requestBody:\n        $ref: \"#/components/requestBodies/Pet\"\n      responses:\n        \"405\":\n          description: Invalid input\n    put:\n      tags:\n        - pet\n      summary: Update an existing pet\n      description: \"\"\n      operationId: updatePet\n      requestBody:\n        $ref: \"#/components/requestBodies/Pet\"\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n        \"405\":\n          description: Validation exception\n  /pet/findByStatus:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by status\n      description: Multiple status values can be provided with comma separated strings\n      operationId: findPetsByStatus\n      parameters:\n        - name: status\n          in: query\n          description: Status values that need to be considered for filter\n          required: true\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - available\n                - pending\n                - sold\n              default: available\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          description: Invalid status value\n  /pet/findByTags:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by tags\n      description: Multiple tags can be provided with comma separated strings. Use tag1,\n        tag2, tag3 for testing.\n      operationId: findPetsByTags\n      parameters:\n        - name: tags\n          in: query\n          description: Tags to filter by\n          required: true\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          description: Invalid tag value\n      deprecated: true\n  \"/pet/{petId}\":\n    get:\n      tags:\n        - pet\n      summary: Find pet by ID\n      description: Returns a single pet\n      operationId: getPetById\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n    post:\n      tags:\n        - pet\n      summary: Updates a pet in the store with form data\n      description: \"\"\n      operationId: updatePetWithForm\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: Updated name of the pet\n                  type: string\n                status:\n                  description: Updated status of the pet\n                  type: string\n      responses:\n        \"405\":\n          description: Invalid input\n    delete:\n      tags:\n        - pet\n      summary: Deletes a pet\n      description: \"\"\n      operationId: deletePet\n      parameters:\n        - name: api_key\n          in: header\n          required: false\n          schema:\n            type: string\n        - name: petId\n          in: path\n          description: Pet id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n  /store/inventory:\n    get:\n      tags:\n        - store\n      summary: Returns pet inventories by status\n      description: Returns a map of status codes to quantities\n      operationId: getInventory\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: integer\n                  format: int32\n  /store/order:\n    post:\n      tags:\n        - store\n      summary: Place an order for a pet\n      description: \"\"\n      operationId: placeOrder\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Order\"\n        description: order placed for purchasing the pet\n        required: true\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n        \"400\":\n          description: Invalid Order\n  \"/store/order/{orderId}\":\n    get:\n      tags:\n        - store\n      summary: Find purchase order by ID\n      description: For valid response try integer IDs with value >= 1 and <= 10. Other\n        values will generated exceptions\n      operationId: getOrderById\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of pet that needs to be fetched\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n            maximum: 10\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Order not found\n    delete:\n      tags:\n        - store\n      summary: Delete purchase order by ID\n      description: For valid response try integer IDs with positive integer value. Negative\n        or non-integer values will generate API errors\n      operationId: deleteOrder\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of the order that needs to be deleted\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Order not found\n  /user:\n    post:\n      tags:\n        - user\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: createUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Created user object\n        required: true\n      responses:\n        default:\n          description: successful operation\n  /user/createWithArray:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: \"\"\n      operationId: createUsersWithArrayInput\n      requestBody:\n        $ref: \"#/components/requestBodies/UserArray\"\n      responses:\n        default:\n          description: successful operation\n  /user/createWithList:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: \"\"\n      operationId: createUsersWithListInput\n      requestBody:\n        $ref: \"#/components/requestBodies/UserArray\"\n      responses:\n        default:\n          description: successful operation\n  /user/login:\n    get:\n      tags:\n        - user\n      summary: Logs user into the system\n      description: \"\"\n      operationId: loginUser\n      parameters:\n        - name: username\n          in: query\n          description: The user name for login\n          required: true\n          schema:\n            type: string\n        - name: password\n          in: query\n          description: The password for login in clear text\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          headers:\n            X-Rate-Limit:\n              description: calls per hour allowed by the user\n              schema:\n                type: integer\n                format: int32\n            X-Expires-After:\n              description: date in UTC when token expires\n              schema:\n                type: string\n                format: date-time\n          content:\n            application/xml:\n              schema:\n                type: string\n            application/json:\n              schema:\n                type: string\n        \"400\":\n          description: Invalid username/password supplied\n  /user/logout:\n    get:\n      tags:\n        - user\n      summary: Logs out current logged in user session\n      description: \"\"\n      operationId: logoutUser\n      responses:\n        default:\n          description: successful operation\n  \"/user/{username}\":\n    get:\n      tags:\n        - user\n      summary: Get user by user name\n      description: \"\"\n      operationId: getUserByName\n      parameters:\n        - name: username\n          in: path\n          description: \"The name that needs to be fetched. Use user1 for testing. \"\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/User\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        \"400\":\n          description: Invalid username supplied\n        \"404\":\n          description: User not found\n    put:\n      tags:\n        - user\n      summary: Updated user\n      description: This can only be done by the logged in user.\n      operationId: updateUser\n      parameters:\n        - name: username\n          in: path\n          description: name that need to be updated\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Updated user object\n        required: true\n      responses:\n        \"400\":\n          description: Invalid user supplied\n        \"404\":\n          description: User not found\n    delete:\n      tags:\n        - user\n      summary: Delete user\n      description: This can only be done by the logged in user.\n      operationId: deleteUser\n      parameters:\n        - name: username\n          in: path\n          description: The name that needs to be deleted\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Invalid username supplied\n        \"404\":\n          description: User not found\nexternalDocs:\n  description: Find out more about Swagger\n  url: http://swagger.io\nservers:\n  - url: https://petstore.swagger.io/v2\ncomponents:\n  requestBodies:\n    UserArray:\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: \"#/components/schemas/User\"\n      description: List of user object\n      required: true\n    Pet:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Pet\"\n        application/xml:\n          schema:\n            $ref: \"#/components/schemas/Pet\"\n      description: Pet object that needs to be added to the store\n      required: true\n  schemas:\n    Order:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        petId:\n          type: integer\n          format: int64\n        quantity:\n          type: integer\n          format: int32\n        shipDate:\n          type: string\n          format: date-time\n        status:\n          type: string\n          description: Order Status\n          enum:\n            - placed\n            - approved\n            - delivered\n        complete:\n          type: boolean\n          default: false\n      xml:\n        name: Order\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        username:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n        phone:\n          type: string\n        userStatus:\n          type: integer\n          format: int32\n          description: User Status\n      xml:\n        name: User\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Category\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Tag\n    Pet:\n      type: object\n      required:\n        - name\n        - photoUrls\n      properties:\n        id:\n          type: integer\n          format: int64\n        category:\n          $ref: \"#/components/schemas/Category\"\n        name:\n          type: string\n          example: doggie\n        photoUrls:\n          type: array\n          xml:\n            name: photoUrl\n            wrapped: true\n          items:\n            type: string\n        tags:\n          type: array\n          xml:\n            name: tag\n            wrapped: true\n          items:\n            $ref: \"#/components/schemas/Tag\"\n        status:\n          type: string\n          description: pet status in the store\n          enum:\n            - available\n            - pending\n            - sold\n      xml:\n        name: Pet\n    ApiResponse:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        type:\n          type: string\n        message:\n          type: string\n","contentType":"yaml","_type":"api_spec"},{"_id":"uts_6224a6c1c0994672a3506f0a35062ab9","parentId":"wrk_67855b21f7374f279ab348ff3fa9655d","modified":1731449787283,"created":1731449585308,"name":"New Suite","metaSortKey":-1731449585307,"_type":"unit_test_suite"},{"_id":"ut_14eb952229bf4c128f7e7f95a46fe485","parentId":"uts_6224a6c1c0994672a3506f0a35062ab9","modified":1731451141669,"created":1731450759427,"requestId":"req_d07cdf46e19c4e4db14b45575cca9c9c","name":"goiania","code":"const response = await insomnia.send();\nexpect(response.status).to.equal(200);\n\nconst jsonBody = JSON.parse(response.data);\n\n// Helper functions to check dates\nconst isNovember2024 = (dateStr) => {\n    const [day, month, year] = dateStr.split('/').map(num => parseInt(num));\n    return month === 11 && year === 2024;\n};\n\nconst isDecember2024 = (dateStr) => {\n    const [day, month, year] = dateStr.split('/').map(num => parseInt(num));\n    return month === 12 && year === 2024;\n};\n\n// Check for dates in November and December\nconst hasNovemberDates = jsonBody.some(unit => \n    unit.datas.some(date => isNovember2024(date))\n);\n\nconst hasDecemberDates = jsonBody.some(unit => \n    unit.datas.some(date => isDecember2024(date))\n);\n\nexpect(hasNovemberDates == true || hasDecemberDates == true).to.eql(true);\n","metaSortKey":-1731450759427,"_type":"unit_test"},{"_id":"ut_239f4cbd861f4946ba3cf48ff63ca01e","parentId":"uts_6224a6c1c0994672a3506f0a35062ab9","modified":1731451160334,"created":1731451145962,"requestId":"req_87a6acaf17ac40168fec288488bf6cff","name":"aparecida","code":"const response = await insomnia.send();\nexpect(response.status).to.equal(200);\n\nconst jsonBody = JSON.parse(response.data);\n\n// Helper functions to check dates\nconst isNovember2024 = (dateStr) => {\n    const [day, month, year] = dateStr.split('/').map(num => parseInt(num));\n    return month === 11 && year === 2024;\n};\n\nconst isDecember2024 = (dateStr) => {\n    const [day, month, year] = dateStr.split('/').map(num => parseInt(num));\n    return month === 12 && year === 2024;\n};\n\n// Check for dates in November and December\nconst hasNovemberDates = jsonBody.some(unit => \n    unit.datas.some(date => isNovember2024(date))\n);\n\nconst hasDecemberDates = jsonBody.some(unit => \n    unit.datas.some(date => isDecember2024(date))\n);\n\nexpect(hasNovemberDates == true || hasDecemberDates == true).to.eql(true);\n","metaSortKey":-1731451145962,"_type":"unit_test"},{"_id":"ut_b428c793c7574b359dfbf811a7f37389","parentId":"uts_6224a6c1c0994672a3506f0a35062ab9","modified":1731451166580,"created":1731451154132,"requestId":"req_5462ea790bdd48a7866ce49afaccec10","name":"trindade","code":"const response = await insomnia.send();\nexpect(response.status).to.equal(200);\n\nconst jsonBody = JSON.parse(response.data);\n\n// Helper functions to check dates\nconst isNovember2024 = (dateStr) => {\n    const [day, month, year] = dateStr.split('/').map(num => parseInt(num));\n    return month === 11 && year === 2024;\n};\n\nconst isDecember2024 = (dateStr) => {\n    const [day, month, year] = dateStr.split('/').map(num => parseInt(num));\n    return month === 12 && year === 2024;\n};\n\n// Check for dates in November and December\nconst hasNovemberDates = jsonBody.some(unit => \n    unit.datas.some(date => isNovember2024(date))\n);\n\nconst hasDecemberDates = jsonBody.some(unit => \n    unit.datas.some(date => isDecember2024(date))\n);\n\nexpect(hasNovemberDates == true || hasDecemberDates == true).to.eql(true);\n","metaSortKey":-1731451154132,"_type":"unit_test"}]}