_type: export
__export_format: 4
__export_date: 2024-11-12T22:58:27.418Z
__export_source: insomnia.desktop.app:v10.1.1
resources:
  - _id: req_d07cdf46e19c4e4db14b45575cca9c9c
    parentId: fld_6989df2f67c04dc98e25e3e54fff7f10
    modified: 1731451069654
    created: 1731449468439
    url: https://api.go.gov.br/sigac/atendimentos/v1.0/agendamento/listarDatasAgendamento
    name: goiania
    description: ""
    method: GET
    body: {}
    parameters:
      - name: idSenha
        value: "58"
        id: pair_5a6c3b985d764a49bdddde327e02c97b
        disabled: false
      - name: status
        value: D
        id: pair_9f4c3bde3ef84f81a3ba9d823317604b
        disabled: false
      - name: codgMunicipio
        value: "25300"
        id: pair_c2b1595a8f8c43e4a4944382166727cd
        disabled: false
    headers:
      - name: User-Agent
        value: insomnia/10.1.1
    authentication: {}
    metaSortKey: -1731449478044
    isPrivate: false
    pathParameters: []
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: fld_6989df2f67c04dc98e25e3e54fff7f10
    parentId: wrk_67855b21f7374f279ab348ff3fa9655d
    modified: 1731449504318
    created: 1731449472420
    name: base
    description: ""
    environment: {}
    environmentPropertyOrder: null
    metaSortKey: -1731449472420
    authentication:
      type: oauth2
      grantType: client_credentials
      clientId: jMQoyH_T2GpWXwBlH6goWfBBdr0a
      clientSecret: k8BOsIHTF6sARfHq4qBPsvaYjf4a
      accessTokenUrl: https://api.go.gov.br/token
    _type: request_group
  - _id: wrk_67855b21f7374f279ab348ff3fa9655d
    parentId: null
    modified: 1731449449138
    created: 1731449449138
    name: vapt-vupt-spec.yaml
    description: ""
    scope: design
    _type: workspace
  - _id: req_87a6acaf17ac40168fec288488bf6cff
    parentId: fld_6989df2f67c04dc98e25e3e54fff7f10
    modified: 1731451111757
    created: 1731451075315
    url: https://api.go.gov.br/sigac/atendimentos/v1.0/agendamento/listarDatasAgendamento
    name: aparecida
    description: ""
    method: GET
    body: {}
    parameters:
      - name: idSenha
        value: "58"
        id: pair_5a6c3b985d764a49bdddde327e02c97b
        disabled: false
      - name: status
        value: D
        id: pair_9f4c3bde3ef84f81a3ba9d823317604b
        disabled: false
      - name: codgMunicipio
        value: "33800"
        id: pair_c2b1595a8f8c43e4a4944382166727cd
        disabled: false
    headers:
      - name: User-Agent
        value: insomnia/10.1.1
    authentication: {}
    metaSortKey: -1731448160753
    isPrivate: false
    pathParameters: []
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_5462ea790bdd48a7866ce49afaccec10
    parentId: fld_6989df2f67c04dc98e25e3e54fff7f10
    modified: 1731451128399
    created: 1731451079766
    url: https://api.go.gov.br/sigac/atendimentos/v1.0/agendamento/listarDatasAgendamento
    name: trindade
    description: ""
    method: GET
    body: {}
    parameters:
      - name: idSenha
        value: "58"
        id: pair_5a6c3b985d764a49bdddde327e02c97b
        disabled: false
      - name: status
        value: D
        id: pair_9f4c3bde3ef84f81a3ba9d823317604b
        disabled: false
      - name: codgMunicipio
        value: "28800"
        id: pair_c2b1595a8f8c43e4a4944382166727cd
        disabled: false
    headers:
      - name: User-Agent
        value: insomnia/10.1.1
    authentication: {}
    metaSortKey: -1731447502107.5
    isPrivate: false
    pathParameters: []
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: env_2ae5c8c888ab830d64c25e45ccc0cd786627abdc
    parentId: wrk_67855b21f7374f279ab348ff3fa9655d
    modified: 1731449449140
    created: 1731449449140
    name: Base Environment
    data: {}
    dataPropertyOrder: null
    color: null
    isPrivate: false
    metaSortKey: 1731449449140
    _type: environment
  - _id: jar_2ae5c8c888ab830d64c25e45ccc0cd786627abdc
    parentId: wrk_67855b21f7374f279ab348ff3fa9655d
    modified: 1731451169878
    created: 1731449449140
    name: Default Jar
    cookies:
      - key: BIGipServer~Apps~pool_sso-go
        value: rd3o00000000000000000000ffff0a06032do9443
        domain: api.go.gov.br
        path: /
        httpOnly: true
        hostOnly: true
        creation: 2024-11-12T22:11:46.981Z
        lastAccessed: 2024-11-12T22:11:46.981Z
        id: 4c01e323-3941-43d0-95a5-dc65a33eb6f6
      - key: TS0181b636
        value: 01668d6620abec2b0d413a0275a0201c75a460747d551a6519a70cce53dd9204029a8ae53d19eb04c2e76fe032cf6bb281524e3ab4
        domain: api.go.gov.br
        path: /
        hostOnly: true
        creation: 2024-11-12T22:11:46.981Z
        lastAccessed: 2024-11-12T22:39:29.877Z
        id: 47f755bc-0cfc-482d-9a06-e6214504a9e0
      - key: CookieGenericoGoias
        value: rd3o00000000000000000000ffff0a060347o80
        domain: api.go.gov.br
        path: /
        httpOnly: true
        hostOnly: true
        creation: 2024-11-12T22:12:48.529Z
        lastAccessed: 2024-11-12T22:12:48.529Z
        id: a6c2e647-8bb2-449f-8bd6-a358858b7595
      - key: dummy_session
        value: mm9iip6jdh26uac3dnfsaid5an
        expires: 2024-11-12T23:39:29.000Z
        maxAge: 3600
        domain: api.go.gov.br
        path: /
        hostOnly: true
        creation: 2024-11-12T22:12:48.530Z
        lastAccessed: 2024-11-12T22:39:29.877Z
        id: e896e997-7202-45b9-be14-493c9628448c
    _type: cookie_jar
  - _id: spc_2a92e5ed1c034ae2ab7fd9143185ca17
    parentId: wrk_67855b21f7374f279ab348ff3fa9655d
    modified: 1731450391539
    created: 1731450391539
    fileName: vapt-vupt-spec.yaml
    contents: >
      openapi: 3.0.0

      info:
        description: "This is a sample server Petstore server.  You can find out more about
          Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net,
          #swagger](http://swagger.io/irc/).  For this sample, you can use the api key
          'special-key' to test the authorization filters."
        version: 1.0.2
        title: Swagger Petstore
        termsOfService: http://swagger.io/terms/
        contact:
          email: apiteam@swagger.io
        license:
          name: Apache 2.0
          url: http://www.apache.org/licenses/LICENSE-2.0.html
      tags:
        - name: pet
          description: Everything about your Pets
          externalDocs:
            description: Find out more
            url: http://swagger.io
        - name: store
          description: Access to Petstore orders
        - name: user
          description: Operations about user
          externalDocs:
            description: Find out more about our store
            url: http://swagger.io
      paths:
        /pet:
          post:
            tags:
              - pet
            summary: Add a new pet to the store
            description: ""
            operationId: addPet
            requestBody:
              $ref: "#/components/requestBodies/Pet"
            responses:
              "405":
                description: Invalid input
          put:
            tags:
              - pet
            summary: Update an existing pet
            description: ""
            operationId: updatePet
            requestBody:
              $ref: "#/components/requestBodies/Pet"
            responses:
              "400":
                description: Invalid ID supplied
              "404":
                description: Pet not found
              "405":
                description: Validation exception
        /pet/findByStatus:
          get:
            tags:
              - pet
            summary: Finds Pets by status
            description: Multiple status values can be provided with comma separated strings
            operationId: findPetsByStatus
            parameters:
              - name: status
                in: query
                description: Status values that need to be considered for filter
                required: true
                explode: true
                schema:
                  type: array
                  items:
                    type: string
                    enum:
                      - available
                      - pending
                      - sold
                    default: available
            responses:
              "200":
                description: successful operation
                content:
                  application/xml:
                    schema:
                      type: array
                      items:
                        $ref: "#/components/schemas/Pet"
                  application/json:
                    schema:
                      type: array
                      items:
                        $ref: "#/components/schemas/Pet"
              "400":
                description: Invalid status value
        /pet/findByTags:
          get:
            tags:
              - pet
            summary: Finds Pets by tags
            description: Multiple tags can be provided with comma separated strings. Use tag1,
              tag2, tag3 for testing.
            operationId: findPetsByTags
            parameters:
              - name: tags
                in: query
                description: Tags to filter by
                required: true
                explode: true
                schema:
                  type: array
                  items:
                    type: string
            responses:
              "200":
                description: successful operation
                content:
                  application/xml:
                    schema:
                      type: array
                      items:
                        $ref: "#/components/schemas/Pet"
                  application/json:
                    schema:
                      type: array
                      items:
                        $ref: "#/components/schemas/Pet"
              "400":
                description: Invalid tag value
            deprecated: true
        "/pet/{petId}":
          get:
            tags:
              - pet
            summary: Find pet by ID
            description: Returns a single pet
            operationId: getPetById
            parameters:
              - name: petId
                in: path
                description: ID of pet to return
                required: true
                schema:
                  type: integer
                  format: int64
            responses:
              "200":
                description: successful operation
                content:
                  application/xml:
                    schema:
                      $ref: "#/components/schemas/Pet"
                  application/json:
                    schema:
                      $ref: "#/components/schemas/Pet"
              "400":
                description: Invalid ID supplied
              "404":
                description: Pet not found
          post:
            tags:
              - pet
            summary: Updates a pet in the store with form data
            description: ""
            operationId: updatePetWithForm
            parameters:
              - name: petId
                in: path
                description: ID of pet that needs to be updated
                required: true
                schema:
                  type: integer
                  format: int64
            requestBody:
              content:
                application/x-www-form-urlencoded:
                  schema:
                    type: object
                    properties:
                      name:
                        description: Updated name of the pet
                        type: string
                      status:
                        description: Updated status of the pet
                        type: string
            responses:
              "405":
                description: Invalid input
          delete:
            tags:
              - pet
            summary: Deletes a pet
            description: ""
            operationId: deletePet
            parameters:
              - name: api_key
                in: header
                required: false
                schema:
                  type: string
              - name: petId
                in: path
                description: Pet id to delete
                required: true
                schema:
                  type: integer
                  format: int64
            responses:
              "400":
                description: Invalid ID supplied
              "404":
                description: Pet not found
        /store/inventory:
          get:
            tags:
              - store
            summary: Returns pet inventories by status
            description: Returns a map of status codes to quantities
            operationId: getInventory
            responses:
              "200":
                description: successful operation
                content:
                  application/json:
                    schema:
                      type: object
                      additionalProperties:
                        type: integer
                        format: int32
        /store/order:
          post:
            tags:
              - store
            summary: Place an order for a pet
            description: ""
            operationId: placeOrder
            requestBody:
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/Order"
              description: order placed for purchasing the pet
              required: true
            responses:
              "200":
                description: successful operation
                content:
                  application/xml:
                    schema:
                      $ref: "#/components/schemas/Order"
                  application/json:
                    schema:
                      $ref: "#/components/schemas/Order"
              "400":
                description: Invalid Order
        "/store/order/{orderId}":
          get:
            tags:
              - store
            summary: Find purchase order by ID
            description: For valid response try integer IDs with value >= 1 and <= 10. Other
              values will generated exceptions
            operationId: getOrderById
            parameters:
              - name: orderId
                in: path
                description: ID of pet that needs to be fetched
                required: true
                schema:
                  type: integer
                  format: int64
                  minimum: 1
                  maximum: 10
            responses:
              "200":
                description: successful operation
                content:
                  application/xml:
                    schema:
                      $ref: "#/components/schemas/Order"
                  application/json:
                    schema:
                      $ref: "#/components/schemas/Order"
              "400":
                description: Invalid ID supplied
              "404":
                description: Order not found
          delete:
            tags:
              - store
            summary: Delete purchase order by ID
            description: For valid response try integer IDs with positive integer value. Negative
              or non-integer values will generate API errors
            operationId: deleteOrder
            parameters:
              - name: orderId
                in: path
                description: ID of the order that needs to be deleted
                required: true
                schema:
                  type: integer
                  format: int64
                  minimum: 1
            responses:
              "400":
                description: Invalid ID supplied
              "404":
                description: Order not found
        /user:
          post:
            tags:
              - user
            summary: Create user
            description: This can only be done by the logged in user.
            operationId: createUser
            requestBody:
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/User"
              description: Created user object
              required: true
            responses:
              default:
                description: successful operation
        /user/createWithArray:
          post:
            tags:
              - user
            summary: Creates list of users with given input array
            description: ""
            operationId: createUsersWithArrayInput
            requestBody:
              $ref: "#/components/requestBodies/UserArray"
            responses:
              default:
                description: successful operation
        /user/createWithList:
          post:
            tags:
              - user
            summary: Creates list of users with given input array
            description: ""
            operationId: createUsersWithListInput
            requestBody:
              $ref: "#/components/requestBodies/UserArray"
            responses:
              default:
                description: successful operation
        /user/login:
          get:
            tags:
              - user
            summary: Logs user into the system
            description: ""
            operationId: loginUser
            parameters:
              - name: username
                in: query
                description: The user name for login
                required: true
                schema:
                  type: string
              - name: password
                in: query
                description: The password for login in clear text
                required: true
                schema:
                  type: string
            responses:
              "200":
                description: successful operation
                headers:
                  X-Rate-Limit:
                    description: calls per hour allowed by the user
                    schema:
                      type: integer
                      format: int32
                  X-Expires-After:
                    description: date in UTC when token expires
                    schema:
                      type: string
                      format: date-time
                content:
                  application/xml:
                    schema:
                      type: string
                  application/json:
                    schema:
                      type: string
              "400":
                description: Invalid username/password supplied
        /user/logout:
          get:
            tags:
              - user
            summary: Logs out current logged in user session
            description: ""
            operationId: logoutUser
            responses:
              default:
                description: successful operation
        "/user/{username}":
          get:
            tags:
              - user
            summary: Get user by user name
            description: ""
            operationId: getUserByName
            parameters:
              - name: username
                in: path
                description: "The name that needs to be fetched. Use user1 for testing. "
                required: true
                schema:
                  type: string
            responses:
              "200":
                description: successful operation
                content:
                  application/xml:
                    schema:
                      $ref: "#/components/schemas/User"
                  application/json:
                    schema:
                      $ref: "#/components/schemas/User"
              "400":
                description: Invalid username supplied
              "404":
                description: User not found
          put:
            tags:
              - user
            summary: Updated user
            description: This can only be done by the logged in user.
            operationId: updateUser
            parameters:
              - name: username
                in: path
                description: name that need to be updated
                required: true
                schema:
                  type: string
            requestBody:
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/User"
              description: Updated user object
              required: true
            responses:
              "400":
                description: Invalid user supplied
              "404":
                description: User not found
          delete:
            tags:
              - user
            summary: Delete user
            description: This can only be done by the logged in user.
            operationId: deleteUser
            parameters:
              - name: username
                in: path
                description: The name that needs to be deleted
                required: true
                schema:
                  type: string
            responses:
              "400":
                description: Invalid username supplied
              "404":
                description: User not found
      externalDocs:
        description: Find out more about Swagger
        url: http://swagger.io
      servers:
        - url: https://petstore.swagger.io/v2
      components:
        requestBodies:
          UserArray:
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: "#/components/schemas/User"
            description: List of user object
            required: true
          Pet:
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Pet"
              application/xml:
                schema:
                  $ref: "#/components/schemas/Pet"
            description: Pet object that needs to be added to the store
            required: true
        schemas:
          Order:
            type: object
            properties:
              id:
                type: integer
                format: int64
              petId:
                type: integer
                format: int64
              quantity:
                type: integer
                format: int32
              shipDate:
                type: string
                format: date-time
              status:
                type: string
                description: Order Status
                enum:
                  - placed
                  - approved
                  - delivered
              complete:
                type: boolean
                default: false
            xml:
              name: Order
          User:
            type: object
            properties:
              id:
                type: integer
                format: int64
              username:
                type: string
              firstName:
                type: string
              lastName:
                type: string
              email:
                type: string
              password:
                type: string
              phone:
                type: string
              userStatus:
                type: integer
                format: int32
                description: User Status
            xml:
              name: User
          Category:
            type: object
            properties:
              id:
                type: integer
                format: int64
              name:
                type: string
            xml:
              name: Category
          Tag:
            type: object
            properties:
              id:
                type: integer
                format: int64
              name:
                type: string
            xml:
              name: Tag
          Pet:
            type: object
            required:
              - name
              - photoUrls
            properties:
              id:
                type: integer
                format: int64
              category:
                $ref: "#/components/schemas/Category"
              name:
                type: string
                example: doggie
              photoUrls:
                type: array
                xml:
                  name: photoUrl
                  wrapped: true
                items:
                  type: string
              tags:
                type: array
                xml:
                  name: tag
                  wrapped: true
                items:
                  $ref: "#/components/schemas/Tag"
              status:
                type: string
                description: pet status in the store
                enum:
                  - available
                  - pending
                  - sold
            xml:
              name: Pet
          ApiResponse:
            type: object
            properties:
              code:
                type: integer
                format: int32
              type:
                type: string
              message:
                type: string
    contentType: yaml
    _type: api_spec
  - _id: uts_6224a6c1c0994672a3506f0a35062ab9
    parentId: wrk_67855b21f7374f279ab348ff3fa9655d
    modified: 1731449787283
    created: 1731449585308
    name: New Suite
    metaSortKey: -1731449585307
    _type: unit_test_suite
  - _id: ut_14eb952229bf4c128f7e7f95a46fe485
    parentId: uts_6224a6c1c0994672a3506f0a35062ab9
    modified: 1731451141669
    created: 1731450759427
    requestId: req_d07cdf46e19c4e4db14b45575cca9c9c
    name: goiania
    code: >
      const response = await insomnia.send();

      expect(response.status).to.equal(200);


      const jsonBody = JSON.parse(response.data);


      // Helper functions to check dates

      const isNovember2024 = (dateStr) => {
          const [day, month, year] = dateStr.split('/').map(num => parseInt(num));
          return month === 11 && year === 2024;
      };


      const isDecember2024 = (dateStr) => {
          const [day, month, year] = dateStr.split('/').map(num => parseInt(num));
          return month === 12 && year === 2024;
      };


      // Check for dates in November and December

      const hasNovemberDates = jsonBody.some(unit => 
          unit.datas.some(date => isNovember2024(date))
      );


      const hasDecemberDates = jsonBody.some(unit => 
          unit.datas.some(date => isDecember2024(date))
      );


      expect(hasNovemberDates == true || hasDecemberDates == true).to.eql(true);
    metaSortKey: -1731450759427
    _type: unit_test
  - _id: ut_239f4cbd861f4946ba3cf48ff63ca01e
    parentId: uts_6224a6c1c0994672a3506f0a35062ab9
    modified: 1731451160334
    created: 1731451145962
    requestId: req_87a6acaf17ac40168fec288488bf6cff
    name: aparecida
    code: >
      const response = await insomnia.send();

      expect(response.status).to.equal(200);


      const jsonBody = JSON.parse(response.data);


      // Helper functions to check dates

      const isNovember2024 = (dateStr) => {
          const [day, month, year] = dateStr.split('/').map(num => parseInt(num));
          return month === 11 && year === 2024;
      };


      const isDecember2024 = (dateStr) => {
          const [day, month, year] = dateStr.split('/').map(num => parseInt(num));
          return month === 12 && year === 2024;
      };


      // Check for dates in November and December

      const hasNovemberDates = jsonBody.some(unit => 
          unit.datas.some(date => isNovember2024(date))
      );


      const hasDecemberDates = jsonBody.some(unit => 
          unit.datas.some(date => isDecember2024(date))
      );


      expect(hasNovemberDates == true || hasDecemberDates == true).to.eql(true);
    metaSortKey: -1731451145962
    _type: unit_test
  - _id: ut_b428c793c7574b359dfbf811a7f37389
    parentId: uts_6224a6c1c0994672a3506f0a35062ab9
    modified: 1731451166580
    created: 1731451154132
    requestId: req_5462ea790bdd48a7866ce49afaccec10
    name: trindade
    code: >
      const response = await insomnia.send();

      expect(response.status).to.equal(200);


      const jsonBody = JSON.parse(response.data);


      // Helper functions to check dates

      const isNovember2024 = (dateStr) => {
          const [day, month, year] = dateStr.split('/').map(num => parseInt(num));
          return month === 11 && year === 2024;
      };


      const isDecember2024 = (dateStr) => {
          const [day, month, year] = dateStr.split('/').map(num => parseInt(num));
          return month === 12 && year === 2024;
      };


      // Check for dates in November and December

      const hasNovemberDates = jsonBody.some(unit => 
          unit.datas.some(date => isNovember2024(date))
      );


      const hasDecemberDates = jsonBody.some(unit => 
          unit.datas.some(date => isDecember2024(date))
      );


      expect(hasNovemberDates == true || hasDecemberDates == true).to.eql(true);
    metaSortKey: -1731451154132
    _type: unit_test
